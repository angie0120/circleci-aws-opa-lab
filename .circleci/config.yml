version: 2.1

jobs:
  policy-validation:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install OPA and jq
          command: |
            set -e
            sudo apt-get update
            sudo apt-get install -y jq curl
            curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
            chmod +x opa && sudo mv opa /usr/local/bin/
      - run:
          name: Run OPA unit tests
          command: opa test policies/ tests/
      - run:
          name: Validate compliant resources
          command: |
            cat > compliant.json \<<'JSON'
            {
              "resource_type": "aws_s3_bucket",
              "server_side_encryption_configuration": {
                "rule": { "apply_server_side_encryption_by_default": { "sse_algorithm": "AES256" } }
              },
              "versioning": { "enabled": true }
            }
            JSON
            opa eval -d policies/ -i compliant.json "data.aws.s3.security.deny" --format pretty

  deploy-compliant-infra:
    docker:
      - image: cimg/base:stable
    environment:
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - checkout
      - run:
          name: Install AWS CLI and Terraform
          command: |
            set -e
            sudo apt-get update
            sudo apt-get install -y unzip jq curl
            # AWS CLI
            curl -sS https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip -o awscliv2.zip
            sudo ./aws/install
            aws --version
            # Terraform via curl (no wget)
            curl -L https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip -o terraform_1.6.0_linux_amd64.zip
            unzip -o terraform_1.6.0_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -version
      - run:
          name: Assume role via OIDC (verify creds)
          command: |
            set -e
            export AWS_ROLE_ARN="arn:aws:iam::399966706844:role/CircleCILabRole"
            export AWS_WEB_IDENTITY_TOKEN_FILE="/tmp/web-identity-token"
            echo "$CIRCLE_OIDC_TOKEN" > "$AWS_WEB_IDENTITY_TOKEN_FILE"
            # Quick check before Terraform:
            aws sts get-caller-identity
      - run:
          name: Deploy compliant S3 (encrypt + block public + versioning)
          command: |
            set -e
            mkdir -p terraform
            cd terraform

            cat > main.tf \<<'TERRAFORM'
            terraform {
              required_version = ">= 1.6.0"
              required_providers {
                aws = {
                  source  = "hashicorp/aws"
                  version = ">= 5.0"
                }
                random = {
                  source  = "hashicorp/random"
                  version = ">= 3.0"
                }
              }
            }

            provider "aws" {
              region = "us-east-1"
            }

            resource "random_string" "suffix" {
              length  = 8
              special = false
              upper   = false
            }

            resource "aws_s3_bucket" "compliant_bucket" {
              bucket = "circleci-lab-compliant-${random_string.suffix.result}"
            }

            resource "aws_s3_bucket_server_side_encryption_configuration" "compliant_encryption" {
              bucket = aws_s3_bucket.compliant_bucket.id
              rule {
                apply_server_side_encryption_by_default {
                  sse_algorithm = "AES256"
                }
              }
            }

            resource "aws_s3_bucket_public_access_block" "compliant_pab" {
              bucket                  = aws_s3_bucket.compliant_bucket.id
              block_public_acls       = true
              block_public_policy     = true
              ignore_public_acls      = true
              restrict_public_buckets = true
            }

            resource "aws_s3_bucket_versioning" "compliant_versioning" {
              bucket = aws_s3_bucket.compliant_bucket.id
              versioning_configuration {
                status = "Enabled"
              }
            }

            output "bucket_name" {
              value = aws_s3_bucket.compliant_bucket.bucket
            }
            TERRAFORM

            terraform init -input=false
            terraform plan -out=tfplan -input=false
            terraform apply -auto-approve tfplan

            echo "✅ Compliant infrastructure deployed:"
            terraform output

            # Cleanup to avoid charges
            terraform destroy -auto-approve
            echo "✅ Cleaned up"
            
workflows:
  security-pipeline:
    jobs:
      - policy-validation
      - deploy-compliant-infra:
          requires:
            - policy-validation
